import cv2
import numpy as np

def preprocess_image(image_path):
    # Load the image in grayscale
    image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    
    # Apply thresholding
    _, thresh = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)
    
    # Apply morphological operations to clean noise
    kernel = cv2.getStructuringElement(cv2.MORPH_RECT, (5, 5))
    cleaned = cv2.morphologyEx(thresh, cv2.MORPH_CLOSE, kernel)
    
    return cleaned

def detect_contours(processed_image):
    # Find contours in the image
    contours, _ = cv2.findContours(processed_image, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    return contours

def chain_code(contour):
    # Compute Freeman chain code for a given contour
    chain_code = []
    for i in range(len(contour) - 1):
        dx = contour[i + 1][0][0] - contour[i][0][0]
        dy = contour[i + 1][0][1] - contour[i][0][1]
        if dx == 1 and dy == 0:
            chain_code.append(0)
        elif dx == 1 and dy == -1:
            chain_code.append(1)
        elif dx == 0 and dy == -1:
            chain_code.append(2)
        elif dx == -1 and dy == -1:
            chain_code.append(3)
        elif dx == -1 and dy == 0:
            chain_code.append(4)
        elif dx == -1 and dy == 1:
            chain_code.append(5)
        elif dx == 0 and dy == 1:
            chain_code.append(6)
        elif dx == 1 and dy == 1:
            chain_code.append(7)
    return chain_code

def classify_shape(chain_code):
    # Classify shapes based on chain code patterns
    if len(chain_code) == 4:
        return "Square"
    elif len(chain_code) > 4 and len(chain_code) < 10:
        return "Rectangle"
    elif len(chain_code) > 10:
        return "Circle"
    else:
        return "Unknown"

def main(image_path):
    # Preprocess the image
    processed_image = preprocess_image(image_path)
    
    # Detect contours
    contours = detect_contours(processed_image)
    
    # Classify each contour
    categories = {}
    for i, contour in enumerate(contours):
        chain = chain_code(contour)
        shape = classify_shape(chain)
        categories[f"Object_{i+1}"] = shape
    
    return categories

if __name__ == "__main__":
    image_path = (r'/C:\Users\danis\OneDrive\Documents\Repos\CV_PE2\Practicals\LCA\data\sample_image.jpg')
    categories = main(image_path)
    print("Classified Categories:", categories)